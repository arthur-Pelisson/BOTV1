{
  "_args": [
    [
      {
        "raw": "ascii-art@^1.5.1",
        "scope": null,
        "escapedName": "ascii-art",
        "name": "ascii-art",
        "rawSpec": "^1.5.1",
        "spec": ">=1.5.1 <2.0.0",
        "type": "range"
      },
      "/home/luci/projetGit/botV2"
    ]
  ],
  "_from": "ascii-art@^1.5.1",
  "_hasShrinkwrap": false,
  "_id": "ascii-art@1.5.1",
  "_location": "/ascii-art",
  "_nodeVersion": "8.9.4",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/ascii-art_1.5.1_1550976228711_0.16919099833779372"
  },
  "_npmUser": {
    "name": "khrome",
    "email": "abbey@khrome.net"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "ascii-art@^1.5.1",
    "scope": null,
    "escapedName": "ascii-art",
    "name": "ascii-art",
    "rawSpec": "^1.5.1",
    "spec": ">=1.5.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/ascii-art/-/ascii-art-1.5.1.tgz",
  "_shasum": "c9121d1ec39998ebd9a0692ce14332a8deda1d0f",
  "_shrinkwrap": null,
  "_spec": "ascii-art@^1.5.1",
  "_where": "/home/luci/projetGit/botV2",
  "author": {
    "name": "Abbey Hawk Sparrow",
    "email": "@khrome",
    "url": "http://patternweaver.com"
  },
  "bin": {
    "ascii-art": "./bin/ascii-art"
  },
  "bugs": {
    "url": "https://github.com/khrome/ascii-art/issues"
  },
  "contributors": [],
  "dependencies": {
    "browser-request": "0.3.3",
    "canvas": "1.6.9",
    "dirname-shim": "1.0.0",
    "jsftp": "2.1.3",
    "request": "^2.88.0",
    "yargs": "*"
  },
  "description": "Ansi codes, figlet fonts, and ascii art. 100% JS",
  "devDependencies": {
    "color-difference": "*",
    "karma": "1.3.0",
    "karma-chrome-launcher": "*",
    "karma-mocha": "1.2.0",
    "karma-phantomjs-launcher": "1.0.2",
    "karma-requirejs": "1.1.0",
    "karma-should": "1.0.0",
    "mocha": "*",
    "requirejs": "2.3.2",
    "should": "*"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-B0mdSmLZL7SBC5TFUhCAalfJGiHzLtempprm0/VY4tKHbUMUM3kn5hLGaYbgGwl3k1jWIzHFrze0KZk5DL/RAw==",
    "shasum": "c9121d1ec39998ebd9a0692ce14332a8deda1d0f",
    "tarball": "https://registry.npmjs.org/ascii-art/-/ascii-art-1.5.1.tgz",
    "fileCount": 87,
    "unpackedSize": 2760376,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJccgTlCRA9TVsSAnZWagAArIEP/iTGeIhYOM+5ca/wJ+jY\ns1iCof4jAGIdlX8h6PF4UJ7k5+VgxxqiEW97G/izIbYu5+rIh2gVFoy1Gows\n6w54ebD7t7xSfQAF0n67NBrZrkHkNKbeah3nsyYbDXxQc+cbXdJ8iXsW+eio\nylb8aAAeEmImLsHttPPySz7Lsf9nACkisCXMRMLDWdeIbR/GV82fXBmx8kmi\ndn5guBIV5kgQtyI+jdxjYDeT0dmHr3yi5X6CySGN+0idRJNqHDQ4MsYMwMgC\nbk4a9TBk2SJN9axj0ADP29aTEFWIRk4LU1JJjWrBntYQ4A+gu43sOnCHOAXt\nkE6tMSHRRko0CdD9nqhxWpN1v5kuAHAGwd7KSXLdn8N9pu6Ni+RJud5C4gBC\neP/w/g1t2+GGKU6mYrwg59wHcBedMags3PCWQfCUXjRlRX2xtYb+YgBZ5+au\nyLIASIAj+BzUOv++4XZesaFjSX/8yyd2OU/lZS3F/ufF8slUmhSX96fa3/hl\ntJ/JHeP69kxzzRtx/J03ZWZb6IylKRh98p5i/B4uGB27wknQ6BHlPCnR/F3T\nnfALGwNaWs8cKaLOEz9u97/83L/IJf4moiVav1G5RrEMXDs01QcpRuqHmZQi\npVy6p6zhyj5/td5ET8G6KPvZl0NUwJqnONakwCApZuM5zISbEvDR47P8y1Vy\nYInX\r\n=h62g\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": "*"
  },
  "gitHead": "ebb150939c2ec6dcf0245816830ac56a518a48da",
  "homepage": "https://github.com/khrome/ascii-art",
  "keywords": [
    "ascii",
    "figlet",
    "ansi",
    "terminal",
    "text",
    "command-line",
    "logging",
    "log",
    "xterm",
    "shell",
    "256",
    "rgb",
    "formatting",
    "tty",
    "styles",
    "style",
    "str",
    "string",
    "cli",
    "console",
    "terminal",
    "table",
    "compositing",
    "colors",
    "colour",
    "color",
    "chalk"
  ],
  "license": "MIT",
  "main": "ascii-art.js",
  "maintainers": [
    {
      "name": "khrome",
      "email": "abbey@khrome.net"
    }
  ],
  "name": "ascii-art",
  "optionalDependencies": {
    "canvas": "1.6.9",
    "jsftp": "2.1.3"
  },
  "readme": "\t                   _  _                       _\n\t                  (_)(_)                     | |\n\t  __ _  ___   ___  _  _  ______   __ _  _ __ | |_\n\t / _` |/ __| / __|| || ||______| / _` || '__|| __|\n\t| (_| |\\__ \\| (__ | || |        | (_| || |   | |_\n\t \\__,_||___/ \\___||_||_|         \\__,_||_|    \\__|\n\nascii-art.js\n============\n\n[![NPM version](https://img.shields.io/npm/v/ascii-art.svg)]()\n[![npm](https://img.shields.io/npm/dt/ascii-art.svg)]()\n[![Travis](https://img.shields.io/travis/khrome/ascii-art.svg)]()\n[![GitHub stars](https://img.shields.io/github/stars/khrome/ascii-art.svg?style=social&label=Star)](https://github.com/khrome/ascii-art)\n\nImages, fonts, tables, ansi styles and compositing in Node.js & the browser. 100% JS.\n\nIn the beginning there was [colors.js](https://github.com/Marak/colors.js) but in the fine tradition of vendors calling out a problem they have the solution to, [chalk](https://github.com/yeoman/yo/issues/68) was introduced. In that same vein, I offer `ascii-art` as an update, expansion and generalization of [MooAsciiArt](http://mootools.net/forge/p/mooasciiart) and at the same time it can replace your existing ansi colors library.\n\nIt features support for [Images](docs/Images.md), [Styles](docs/Styles.md), [Tables](docs/Tables.md) and [Figlet Fonts](docs/Figlet.md) as well as handling multi-line joining automatically.\n\nWhy would I use this instead of X?\n----------------------------------\n- **zero dependencies** - while the CL utility and test have dependencies, we will never call out to a module for what is supposed to be this lib's core competancy.\n- **color profiles** support - other libraries assume you are running x11\n- **no prototype manipulation** - No `String.prototype` usage. No `__proto__` usage. No BS.\n- handles the ugly [intersection of **multiline text and ansi codes**](docs/Multiline.md) for you.\n- runs in the **browser and Node.js** (CommonJS, AMD, globals or webpack)\n- **JS + Canvas** Ascii image generation utilities in node don't actually touch any pixels, but usually call out to a binary, we do 100% of our transform in JS, which allows us plug into averaging, distance and other logic dynamically, in powerful ways.\n- It **works like a package manager** for figlet fonts.\n- The **other libraries** out there **do too little**, focus on logging above other domains and often unaware of ANSI controls(for example: style text, then put it in a table).\n- **Supports your existing API** We allow you to use the colors.js/chalk API *or* our own (where we reserve chaining for utility rather than code aesthetics).\n- **Loads nothing that isn't used** (Images, Fonts, Tables, Logic, etc.)\n\n\nInstallation\n------------\n\n\tnpm install ascii-art\n\nIf you'd like to use the command-line tool make sure to use `-g`\n\nIf you want to use `.image()` or `.Image` you must install [`canvas`](https://www.npmjs.com/package/canvas) and if you want to run the chalk tests... you'll need to to install `require-uncached` as well.\n\n\nStyles\n------\n\nAdd ANSI styles to a string and return the result.\n\n| In your code                                    |         In the [Terminal](docs/Terminal.md)                           |\n|-------------------------------------------------|---------------------------------------------------|\n| `.style(text, style[, close]) > String`          | `ascii-art text -s green \"some text\"`             |\n\nStyles are: *italic*, **bold**, <span style=\"text-decoration: underline\">underline</span>, <span style=\"text-decoration: underline overline\">|framed|</span>, <span style=\"text-decoration: underline overline\">|encircled|</span>, <span style=\"text-decoration: overline\">overline</span>, <span style=\"text-decoration: blink\">blink</span> and <span style=\"display:inline-block; background-color:#777777; color: white\">&nbsp;inverse&nbsp;</span>. And available colors are:\n\n| **Color Table**  | `color`       | bright_`color`  | `color`_bg| bright_`color`_bg|\n| -----------------|---------------|-----------------|-----------|------------------|\n| black   |![color](Images/c/black.png)|![color](Images/c/light_black.png)|![color](Images/c/black.png)|![color](Images/c/light_black.png)|\n| red     |![color](Images/c/red.png)|![color](Images/c/light_red.png)|![color](Images/c/red.png)|![color](Images/c/light_red.png)|\n| green   |![color](Images/c/green.png)|![color](Images/c/light_green.png)| ![color](Images/c/green.png)|![color](Images/c/light_green.png)|\n| yellow  |![color](Images/c/yellow.png)|![color](Images/c/light_yellow.png)|![color](Images/c/yellow.png)|![color](Images/c/light_yellow.png)|\n| blue    |![color](Images/c/blue.png)|![color](Images/c/light_blue.png)|![color](Images/c/blue.png) |![color](Images/c/light_blue.png)|\n| cyan    |![color](Images/c/cyan.png)|![color](Images/c/light_cyan.png)|![color](Images/c/cyan.png) |![color](Images/c/light_cyan.png)|\n| magenta |![color](Images/c/magenta.png)|![color](Images/c/light_magenta.png)|![color](Images/c/magenta.png)|![color](Images/c/light_magenta.png)|\n| white   |![color](Images/c/gray.png)|![color](Images/c/light_gray.png)|![color](Images/c/gray.png)|![color](Images/c/light_gray.png)|\n\nFor example: if I wanted underlined blue text on a white background, my style would be `underlined+blue+white_bg`. Check out the detailed [style docs](docs/Styles.md) for more information.\n\nFonts\n-----\n\nRender a string using a figlet font and add that to the buffer. There is a batch version of this function which does not chain and takes an array( `.strings()`).\n\n| In your code                                    |         In the [Terminal](docs/Terminal.md)                           |\n|-------------------------------------------------|---------------------------------------------------|\n| `.font(text, font[, style][, callback])`    | `ascii-art text -F <font> \"Demo!\"`             |\n\nOutputs\n\n\t______                          _\n\t|  _  \\                        | |\n\t| | | |  ___  _ __ ___    ___  | |\n\t| | | | / _ \\| '_ ` _ \\  / _ \\ | |\n\t| |/ / |  __/| | | | | || (_) ||_|\n\t|___/   \\___||_| |_| |_| \\___/ (_)\n\nCheck out the [documentation](docs/Figlet.md) for more examples!\n\nImages\n------\n\nCreate an image from the passed image and append that to the buffer\n\n| In your code                                    |         In the [Terminal](docs/Terminal.md)                           |\n|-------------------------------------------------|---------------------------------------------------|\n| `.image(options[, callback])`                   | `ascii-art image path/to/my/file.jpg`             |\n\nPaired with a font call it looks like:\n\n![Mixed Content Example](http://patternweaver.com/Github/Ascii/docs/initech.png)\n\nCheck out the [documentation](docs/Images.md) for more examples!\n\nTables\n------\n\nGenerate a table from the passed data, with support for many styles and append that to the buffer\n\n| In your code                                    |         In the Terminal                           |\n|-------------------------------------------------|---------------------------------------------------|\n| `.table(options[, callback])`                   | N/A             |\n\n![Styled Table Example](http://patternweaver.com/Github/Ascii/docs/ansi_table.png)\n\nCheck out the [documentation](docs/Tables.md) for more examples!\n\nArtwork\n-------\n\nfetch a graphic from a remote source and append it to the current buffer.\n\n| In your code                                    |         In the [Terminal](docs/Terminal.md)                           |\n|-------------------------------------------------|---------------------------------------------------|\n| `.artwork(options[, callback])`                 | ascii-art art [source][/path]            |\n\nOften I use this in conjunction with an image backdrop, for example to superimpose bones on the earth:\n\n![Mixed Content Example](http://patternweaver.com/Github/Ascii/docs/bones_earth.png)\n\n\nCompositing\n-----------\n\nWe also support combining all these nifty elements you've made into a single composition, via a few functions available on the chains (`.lines()`, `.overlay()` and `.join()`). Maybe I've got A BBS wall I want to have some dynamic info on.. I could make that with\n\n![Mixed Content Example](http://patternweaver.com/Github/Ascii/docs/ghostwire.png)\n\nCheck out the [documentation](docs/Compositing.md) for detailed examples!\n\n\nPromises\n--------\n\nInstead of providing a callback, you can also get a promise instead ( `.toPromise()`).\n\n| In your code                                |\n|---------------------------------------------|\n| `.font(text, font[, style]).toPromise()`    |\n\n\n256 color support\n-----------------\n\n**(Experimental!)** First ensure your terminal supports 256 colors (OS X users, [look here](https://gist.github.com/shawnbot/3277580)), then set `.colors` to `256` this will enable 256 color support across all generated assets.\n\nCompatibility\n-------------\nIf you're a [chalk](https://www.npmjs.com/package/chalk) user, just use `var chalk = require('ascii-art/kaolin');` in place of your existing `chalk` references (Much of color.js, too... since chalk is a subset of colors.js). No migration needed, keep using the wacky syntax you are used to(In this mode, refer to their docs, not mine).\n\nUsers of [ascii-table](https://www.npmjs.com/package/ascii-table) will also note that interface is supported via `require('ascii-art').Table`, though our solution is ansi-aware, lazy rendering and better at sizing columns.\n\nI may support the other [colors](https://www.npmjs.com/package/colors) stuff (extras & themes) eventually, but it's currently a low priority.\n\n\nRoadmap\n-------\n\n####Goals\n- Better Docs\n- Color handling/256 color support\n- value reversal (light vs dark)\n- HTML output\n- [ANSI art](https://en.wikipedia.org/wiki/ANSI_art) support\n- [PETSCII art](https://en.wikipedia.org/wiki/PETSCII) support\n- More stuff!! (averagers, color profiles)\n- true color (hex) support\n- 2 colors per char (possibly zalgo-painting?)\n\n####Non Goals\n\n- realtime: videos, curses, etc.:\n- logging integration\n\n\nTesting\n-------\nIn the root directory run:\n\n\tnpm run test\n\nwhich runs the test suite directly. In order to test it in Chrome try:\n\n\tnpm run browser-test\n\nIn order to run the chalk test, use:\n\n\tnpm run chalk-test\n\nPlease make sure to run the tests before submitting a patch and report any rough edges. Thanks!\n\nEnjoy,\n\n-Abbey Hawk Sparrow\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/khrome/ascii-art.git"
  },
  "scripts": {
    "browser-test": "karma start",
    "chalk-test": "mocha test/extras/kaolin-test.js",
    "sample": "node generate.js",
    "test": "mocha",
    "test-data": "node generate.js save"
  },
  "version": "1.5.1"
}
